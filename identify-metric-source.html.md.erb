---
title:  Default App Metrics
owner: 
---

This topic describes the app metrics that are emitted by all containers managed by <%= vars.app_runtime_full %> (<%= vars.app_runtime_abbr %>) and its scheduling system, Diego.

The topic also explains how to read app metrics metadata to identify which <%= vars.product_name %> product generated the metrics, and to retrieve other information about the metrics source.

App metrics are also called container metrics.

## <a id="container-metrics"></a> Diego Container App Metrics

Diego containers emit the following resource usage metrics for their app instance (AI).  Each metric is averaged over and emitted every 60 seconds.

| Metric | Description | Unit |
|---|---|---|
| `CpuPercentage` | CPU time used by AI as a percentage of a single CPU core | `float64` |
| `AbsoluteCPUUsage` | CPU time used by AI | `uint64` |
| `AbsoluteCPUEntitlement` | CPU time used by AI multiplied by the number of CPU cores on the cell | `uint64` |
| `MemoryBytes` | RAM memory used by AI, in MB | `uint64` |
| `MemoryBytesQuota` | RAM memory available, in GB | `uint64` |
| `DiskBytes` | Disk space used by AI, in MB | `uint64` |
| `DiskBytesQuota` | Disk space available, in GB | `uint64` |
| `ContainerAge` | Age of container, in seconds | `uint64` |

The Diego container app metrics are packaged in the `ContainerMetric` structure defined by the [Diego Logging Client repository](https://github.com/cloudfoundry/diego-logging-client/blob/master/client.go#L30-L43) on Github.

### <a id="cpu-notes"></a> CPU Metrics Notes

- The `CpuPercentage` is usually no greater than `100% * the number of vCPUs on the host Diego cell`, but it may be more when measurements experience timing discrepancies.
- The minimum CPU that the Diego cell provides to a running app instance is `min(app memory, 8 GB) * (Diego cell vCPUs/Diego cell memory) * 100%`.
    - The platform operator can provide the Diego cell vCPU/memory ratio to developers.
    - If a Diego cell is not at capacity or if other workloads on it are idle, the cell can provide more than the minimum CPU.

## <a id="cf-cli"></a> Metrics from the cf CLI

You can use Cloud Foundry command-line interface (cf CLI) commands to return app metrics.

### <a id="cf-app"></a> cf app: cpu, memory, disk

Run the command `cf app APP-NAME` to see current app metrics values for each instance of the app.
The command output lists metric values as follows, based on the [Diego Container App Metrics](#container-metrics) described above:

| Label in Output | App Metrics Listed |
|---|---|
| `cpu` | `CpuPercentage` |
| `memory` | `MemoryBytes` of `MemoryBytesQuota` |
| `disk` | `DiskBytes` of `DiskBytesQuota` |

For example:

<pre class="terminal">
$ cf app dora-example
Showing health and status for app dora-example in org o / space s as admin...

name:              dora-example
requested state:   started
routes:            dora-example.bosh-lite.com
last uploaded:     Fri 05 Apr 10:41:21 PDT 2019
stack:             cflinuxfs3
buildpacks:        ruby

type:           web
instances:      1/1
memory usage:   256M
     state     since                  cpu    memory          disk          details
#0   running   2019-04-05T17:41:31Z   0.4%   39.5M of 256M   89.9M of 1G
</pre>

### <a id="cf-app"></a> cf cpu-entitlement (Experimental)

To see app instance `AbsoluteCPUEntitlement` metrics from the command line:

1. Install the CPU Entitlement Plugin from [github](https://github.com/cloudfoundry/cpu-entitlement-plugin).

1. Run the command `cf cpu-entitlement APP-NAME`.

## <a id="id-source"></a> Identify the Source of App Metrics

<%= vars.product_name %> users can interpret app metric metadata to identify which deployment generated the metrics.
For example, you may want to distinguish between metrics coming from apps hosted by <%= vars.app_runtime_abbr %> itself and apps hosted by a Pivotal Isolation Segment deployment.

### <a id="metrics-prefix"></a> Source Deployment from Tile GUID

Metrics identify their source deployment with a `deployment` tag followed by `cf-` prefixed to the GUID of the source <%= vars.product_name %> tile.
You can use this GUID to identify which tile deployed the Diego cells generating the metrics. 

### <a id="human-friendly-metric-tags"></a> Human-Friendly Metadata

PAS and other runtime tiles tag metrics with additional metadata to help users parse metrics coming from different deployments.
Downstream monitoring products such as [<%= vars.product_name %> Healthwatch](https://docs.pivotal.io/pcf-healthwatch) also use this metadata to display human-readable names.

The tags are as follows:

* `product`: The value of this tag is always `Pivotal Application Service` for the PAS tile. The tags for other products are: `<%= vars.product_name %> Isolation Segment`, `<%= vars.product_name %> Small Footprint`, `Pivotal Application Service for Windows 2012R2`, and `Pivotal Application Service for Windows`.

* `system_domain`: The value of this tag corresponds to what you set in the **System domain** field in the **Domains** pane of a given tile. 

* `placement_tag`: The value of this tag is always `null` for PAS. However, for PAS for Windows and <%= vars.product_name %> Isolation Segment tiles, you can configure this value using the **Segment name** field in the **App Containers** pane. An operator can display capacity and other relevant metrics using the `placement_tag` name. This makes it easier to reason about the importance of a given segment when issues arise.

These tags are properties of the Metron agent running on each VM in a deployment.
